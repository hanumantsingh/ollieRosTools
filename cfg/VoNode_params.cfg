#! /usr/bin/env python

PACKAGE='ollieRosTools'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()






deinterlace_enum = gen.enum([
gen.const("HALF_CUT",       int_t, -2, "Just take Odd rows"),
gen.const("FULL_INTERLACED",     int_t, -1, "Dont do anything, leave it interlaced"),
gen.const("HALF_NEAREST",   int_t, 0,  "nearest-neighbor interpolation of the even rows from the odd ones"),
gen.const("HALF_LINEAR",    int_t, 1,  "bilinear interpolation of the even rows from the odd ones"),
gen.const("HALF_AREA",      int_t, 2,  "resampling using pixel area relation of the even rows from the odd ones"),
gen.const("HALF_CUBIC",     int_t, 3,  "bicubic interpolation over 4x4 pixel neighborhood of the even rows from the odd ones"),
gen.const("HALF_LANCZOS4",  int_t, 4,  "Lanczos interpolation over 8x8 pixel neighborhood of the even rows from the odd ones")
],"Set Deinterlace Method for deinterlacing the incoming image")

interpolation_enum = gen.enum([
gen.const("OFF",            int_t, -1, "nearest-neighbor interpolation"),
gen.const("INTER_NEAREST",  int_t, 0,  "nearest-neighbor interpolation"),
gen.const("LINEAR",         int_t, 1,  "bilinear interpolation"),
gen.const("AREA",           int_t, 2,  "resampling using pixel area relation"),
gen.const("CUBIC",          int_t, 3,  "bicubic interpolation over 4x4 pixel neighborhood"),
gen.const("LANCZOS4",       int_t, 4,  "Lanczos interpolation over 8x8 pixel neighborhood")
],"Set Interpolation Method")

contrast_enum = gen.enum([
gen.const("AUTO",            int_t, -2, "nearest-neighbor interpolation"),
gen.const("NONE",            int_t, -1, "nearest-neighbor interpolation"),
gen.const("MANUAL_INTER_NEAREST",  int_t, 0,  "nearest-neighbor interpolation"),
gen.const("MANUAL_LINEAR",         int_t, 1,  "bilinear interpolation"),
gen.const("MANUAL_AREA",           int_t, 2,  "resampling using pixel area relation"),
gen.const("MANUAL_CUBIC",          int_t, 3,  "bicubic interpolation over 4x4 pixel neighborhood"),
gen.const("MANUAL_LANCZOS4",       int_t, 4,  "Lanczos interpolation over 8x8 pixel neighborhood")
],"Set Interpolation Method")

zoom_enum = gen.enum([
gen.const("UNCHANGED", int_t, 0,  "Leave unchanged"),
gen.const("FULL_ALL",  int_t, 1,  "Zoom out so whole extreme field of view is visible"),
gen.const("FULL_MIN",  int_t, 2,  "Zoom out so whole minimum extreme field of view is visible"),
gen.const("STRETCH_CROP",      int_t, 3,  "Zoom in to minimise unobservable area within image"),
gen.const("MANUAL",    int_t, 4,  "Manually set zoom")
],"Set zoom method")


filter_enum = gen.enum([
gen.const("Off",         int_t, -1,  "..." ),
gen.const("Median",      int_t, 0,   "..." ),
gen.const("Gaussian",    int_t, 1,   "..." ),
gen.const("Box",         int_t, 2,   "..." ),
gen.const("Bilateral",   int_t, 3,   "..." )
],"Set smoothing method")

color_enum = gen.enum([
gen.const("Passthrough",         int_t, -1,  "..." ),
gen.const("BGR8",      int_t, 0,   "..." ),
gen.const("RGB8",    int_t, 1,   "..." ),
gen.const("MONO8",         int_t, 2,   "..." ),
gen.const("YUV422",         int_t, 3,   "..." )
],"Chose Color Encoding")



detector_enum = gen.enum([
gen.const("NO_DETECTION",   int_t, -1,  "..." ),
gen.const("SURF_128",       int_t, 0,  "..." ),
gen.const("SURF_64",        int_t, 1,  "..." ),
gen.const("U_SURF_128",     int_t, 2,  "..." ),
gen.const("U_SURF_64",      int_t, 3,  "..." ),
gen.const("SIFT_Sigma1_6",  int_t, 4,  "..." ),
gen.const("SIFT_Sigma0_8",  int_t, 5,  "..." ),
gen.const("ORB_WK_2",       int_t, 6,  "..." ),
gen.const("ORB_WK_3",       int_t, 7,  "..." ),
gen.const("ORB_WK_4",       int_t, 8,  "..." ),
#gen.const("FAST",           int_t, 9,  "..." ),
#gen.const("PYR_FAST",       int_t, 10,  "..." ),
gen.const("FAST_NMS",       int_t, 11,  "..." ),
gen.const("PYR_FAST_NMS",   int_t, 12,  "..." ),
gen.const("GFTT",           int_t, 13,  "..." ),
gen.const("PYR_GFTT",       int_t, 14, "..." ),
gen.const("HARRIS",         int_t, 15, "..." ),
gen.const("PYR_HARRIS",     int_t, 16, "..." ),
gen.const("MSER",           int_t, 17, "..." ),
gen.const("STAR",           int_t, 18, "..." ),
gen.const("PYR_STAR",       int_t, 19, "..." ),
gen.const("BRISK",          int_t, 20, "..." ),
gen.const("DENSE",          int_t, 21, "..." ),

gen.const("AKAZE_486_3CH_PMGM1",  int_t, 30, "..." ),
gen.const("AKAZE_486_1CH_PMGM1",  int_t, 31, "..." ),
gen.const("AKAZE_160_3CH_PMGM1",  int_t, 32, "..." ),
gen.const("AKAZE_160_1CH_PMGM1",  int_t, 33, "..." ),
gen.const("AKAZE_64_3CH_PMGM1",   int_t, 34, "..." ),
gen.const("AKAZE_64_1CH_PMGM1",   int_t, 35, "..." ),

gen.const("AKAZE_486_3CH_PMGM2",  int_t, 40, "..." ),
gen.const("AKAZE_486_1CH_PMGM2",  int_t, 41, "..." ),
gen.const("AKAZE_160_3CH_PMGM2",  int_t, 42, "..." ),
gen.const("AKAZE_160_1CH_PMGM2",  int_t, 43, "..." ),
gen.const("AKAZE_64_3CH_PMGM2",   int_t, 44, "..." ),
gen.const("AKAZE_64_1CH_PMGM2",   int_t, 45, "..." ),

gen.const("AKAZE_486_3CH_Weickert",  int_t, 50, "..." ),
gen.const("AKAZE_486_1CH_Weickert",  int_t, 51, "..." ),
gen.const("AKAZE_160_3CH_Weickert",  int_t, 52, "..." ),
gen.const("AKAZE_160_1CH_Weickert",  int_t, 53, "..." ),
gen.const("AKAZE_64_3CH_Weickert",   int_t, 54, "..." ),
gen.const("AKAZE_64_1CH_Weickert",   int_t, 55, "..." ),

gen.const("AKAZE_486_3CH_Charbonnier",  int_t, 60, "..." ),
gen.const("AKAZE_486_1CH_Charbonnier",  int_t, 61, "..." ),
gen.const("AKAZE_160_3CH_Charbonnier",  int_t, 62, "..." ),
gen.const("AKAZE_160_1CH_Charbonnier",  int_t, 63, "..." ),
gen.const("AKAZE_64_3CH_Charbonnier",   int_t, 64, "..." ),
gen.const("AKAZE_64_1CH_Charbonnier",   int_t, 65, "..." ),




#gen.const("AGAST_5_8",      int_t, 100,  "..." ),
#gen.const("AGAST_7_12d",    int_t, 101,  "..." ),
#gen.const("AGAST_7_12s",    int_t, 102,  "..." ),
#gen.const("OAST_9_16",      int_t, 103,  "..." ),
gen.const("AGAST_5_8_NMS",      int_t, 104,  "..." ),
gen.const("AGAST_7_12d_NMS",    int_t, 105,  "..." ),
gen.const("AGAST_7_12s_NMS",    int_t, 106,  "..." ),
gen.const("OAST_9_16_NMS",      int_t, 107,  "..." )
],"An enum to chose detectors")

extractor_enum = gen.enum([
gen.const("SURF_128_",       int_t, 0,  "..." ),
gen.const("SURF_64_",        int_t, 1,  "..." ),
gen.const("U_SURF_128_",     int_t, 2,  "..." ),
gen.const("U_SURF_64_",      int_t, 3,  "..." ),
gen.const("SIFT_Sigma1_6_",  int_t, 4,  "..." ),
gen.const("SIFT_Sigma0_8_",  int_t, 5,  "..." ),
gen.const("ORB_WK_2_",       int_t, 6,  "..." ),
gen.const("ORB_WK_3_",       int_t, 7,  "..." ),
gen.const("ORB_WK_4_",       int_t, 8,  "..." ),
gen.const("BRISK_",      int_t, 20, "..." ),

gen.const("AKAZE_486_3CH_PMGM1_",  int_t, 30, "..." ),
gen.const("AKAZE_486_1CH_PMGM1_",  int_t, 31, "..." ),
gen.const("AKAZE_160_3CH_PMGM1_",  int_t, 32, "..." ),
gen.const("AKAZE_160_1CH_PMGM1_",  int_t, 33, "..." ),
gen.const("AKAZE_64_3CH_PMGM1_",   int_t, 34, "..." ),
gen.const("AKAZE_64_1CH_PMGM1_",   int_t, 35, "..." ),

gen.const("AKAZE_486_3CH_PMGM2_",  int_t, 40, "..." ),
gen.const("AKAZE_486_1CH_PMGM2_",  int_t, 41, "..." ),
gen.const("AKAZE_160_3CH_PMGM2_",  int_t, 42, "..." ),
gen.const("AKAZE_160_1CH_PMGM2_",  int_t, 43, "..." ),
gen.const("AKAZE_64_3CH_PMGM2_",   int_t, 44, "..." ),
gen.const("AKAZE_64_1CH_PMGM2_",   int_t, 45, "..." ),

gen.const("AKAZE_486_3CH_Weickert_",  int_t, 50, "..." ),
gen.const("AKAZE_486_1CH_Weickert_",  int_t, 51, "..." ),
gen.const("AKAZE_160_3CH_Weickert_",  int_t, 52, "..." ),
gen.const("AKAZE_160_1CH_Weickert_",  int_t, 53, "..." ),
gen.const("AKAZE_64_3CH_Weickert_",   int_t, 54, "..." ),
gen.const("AKAZE_64_1CH_Weickert_",   int_t, 55, "..." ),

gen.const("AKAZE_486_3CH_Charbonnier_",  int_t, 60, "..." ),
gen.const("AKAZE_486_1CH_Charbonnier_",  int_t, 61, "..." ),
gen.const("AKAZE_160_3CH_Charbonnier_",  int_t, 62, "..." ),
gen.const("AKAZE_160_1CH_Charbonnier_",  int_t, 63, "..." ),
gen.const("AKAZE_64_3CH_Charbonnier_",   int_t, 64, "..." ),
gen.const("AKAZE_64_1CH_Charbonnier_",   int_t, 65, "..." ),



gen.const("BRIEF_16_",       int_t, 200,  "..." ),
gen.const("BRIEF_32_",       int_t, 201,  "..." ),
gen.const("BRIEF_64_",       int_t, 202,  "..." ),
gen.const("R_BRIEF_16_",     int_t, 203,  "..." ),
gen.const("R_BRIEF_32_",     int_t, 204,  "..." ),
gen.const("R_BRIEF_64_",     int_t, 205,  "..." ),
gen.const("FREAK_",          int_t, 206, "..." ),
gen.const("U_FREAK_",        int_t, 207, "..." )
],"An enum to chose extractors")


matcher_enum = gen.enum([
gen.const("BRUTE_FORCE",       int_t, 0,  "..." ),
gen.const("FLANN",       int_t, 1,  "..." )
],"An enum to chose matcher")

norm_enum = gen.enum([
gen.const("L1",       int_t, 2,  "..." ),
gen.const("L2",       int_t, 4,  "..." ),
gen.const("L2_Sqr",       int_t, 5,  "..." )
],"Norm for non-binary BruteForceMatcher")

tracker_enum = gen.enum([
gen.const("F2F_KLT",                int_t, 0,  "..." ),
gen.const("F2F_KLT_EV",             int_t, 1,  "..." ),
gen.const("F2F_KLT_F2KF_BackupTODO",    int_t, 2,  "..." ),
gen.const("F2F_KLT_EV_F2KF_BackupTODO", int_t, 3,  "..." ),
#gen.const("F2FTODO",                    int_t, 4,  "..." ),
#gen.const("F2F_F2KF_BackupTODO",        int_t, 5,  "..." ),
gen.const("F2KF",          int_t, 6,  "..." )
],"An enum to chose matcher")

relPose_enum = gen.enum([
gen.const("RT_Stewenius", int_t, 0, ""),
gen.const("RT_Nister", int_t, 1, ""),
gen.const("RT_7", int_t, 2, "   "),
gen.const("RT_8", int_t, 3, "  "),
gen.const("Rimu_T2", int_t, 5, "  ")
],"Set Rel method")

intiBaseline_enum = gen.enum([
gen.const("Unchanged", int_t, -1, "Baseline is not altered. Baseline has no meaning really."),
gen.const("Fixed_1m", int_t, 0, "Baseline fixed to one meter"),
gen.const("ManualBaseline", int_t, 1, "Baseline specified by the user"),
gen.const("ManualAvgDistance", int_t, 2, "Baseline adjusted so the specified avg depth is reached"),
gen.const("AutoMarker", int_t, 3, "Baseline is estimated absoluted, eg by known markers")
],"Set Method to chose the initial baseline")



triangulation_enum = gen.enum([
gen.const("Linear", int_t, 1, ""),
gen.const("FastNonLinApprox", int_t, 2, "")
],"Set tri method")

absPose_enum = gen.enum([
gen.const("p2pIMU", int_t, 0, ""),
gen.const("p3pKneip", int_t, 1, ""),
gen.const("p3pGao", int_t, 2, "   "),
gen.const("EPnP", int_t, 3, "  ")
],"Set abs method")














########################################################################################################################################################################################################################################################
########################################################################################################################################################################################################################################################
########################################################################################################################################################################################################################################################

#group = gen.add_group("GENERAL")
############################################################## GENERAL
gen.add("nodeOn",  bool_t,   0, "Turn Node on",      True)
gen.add("writeCSV",  bool_t,   0, "",      False)
gen.add("vo_setKeyFrame",  bool_t,   0, "REMOVE ME",      False)
gen.add("vo_doInitialisation",  bool_t,   0, "do initialisation between current frame and reference frame (cam-cam)",      False)
gen.add("vo_doPoseEstimation",  bool_t,   0, "do pose estimation between current frame and latest KF (cam-points) ",      False)
gen.add("vo_doReset",  bool_t,   0, "Reset all keyframes, maps, odometry states, etc",      False)

gen.add("repeatInput",  bool_t,   0, "Unsubscribe from images and repeat input",      False)
gen.add("color", int_t,    0, "Chose color encoding", 2, -1, 3, edit_method=color_enum)
gen.add("imgDelay",      double_t, 0, "How many seconds behind the imu data the image data is",          0.0, 0, 1)



############################################################## PRE PROCESS
gen.add("doDeinterlace", int_t,    1, "Interpolation for Rotation", 1, -2, 4, edit_method=deinterlace_enum)
gen.add("doEqualise",  int_t,    1, "Equalise the image histrogram", -1, -2, 0, edit_method=contrast_enum) # OPENCV BUG, For now only NN works, hence the max is 0 and not 4 here
gen.add("doEqualiseColor",  bool_t,   1, "Equalise color channels vs intensity channel only",      False)
gen.add("brightness",        double_t, 1, "...",          0, -1, 1)
gen.add("contrast",        double_t, 1, "...",          0, -1, 1)
gen.add("doPreprocess",  int_t,    1, "Filter Enum", -1, -1, 3, edit_method=filter_enum)
gen.add("kernelSize",    int_t,    1, "...",          1, 0, 10)
gen.add("sigmaX",        double_t, 1, "...",          3, 0, 200)
gen.add("sigmaY",        double_t, 1, "...",          3, 0, 200)


############################################################## PTAM
gen.add("PTAMRectify", int_t, 2, "Interpolation for Rectification", -1, -1, 5, edit_method=interpolation_enum)
gen.add("sameOutInSize",  bool_t,   2, "The output image size is set to be the same as the input image size",      True)
gen.add("width",     int_t, 2, "...",          720, 240, 1920)
gen.add("height",     int_t, 2, "...",          576, 160, 1080)
gen.add("zoom", int_t, 2, "Zoom method", 0, 0, 4, edit_method=zoom_enum)
gen.add("zoomFactor",     double_t, 0, "...",          1, 0.1, 1.5)
gen.add("fx",     double_t, 2, "...",          0.425198,0, 1)
gen.add("fy",     double_t, 2, "...",          0.579108,0, 1)
gen.add("cx",     double_t, 2, "...",          0.477752,0, 1)
gen.add("cy",     double_t, 2, "...",          0.581669,0, 1)
gen.add("s",      double_t, 2, "...",          0.970746,0, 2)


############################################################## Tracking
gen.add("tracker", int_t, 0, "Tracker Enum", 0, 1, 6, edit_method=tracker_enum)
gen.add("klt_TemplateKF",  bool_t,   1, "Use the keyframe as a template to match against and not the previous frame",      False)
gen.add("klt_levels",  int_t, 0, "0-based maximal pyramid level number; if set to 0, pyramids are not used (single level), if set to 1, two levels are used, etc",          4, 0, 8)
gen.add("klt_window",  int_t, 0, "Size*2+1 of the search window at each pyramid level",  20, 1, 40)
gen.add("klt_iter",  int_t, 0, "Terminate after this many iterations.",          40, 3, 300)
gen.add("klt_eps",  double_t, 0, "Terminate after this many iterations.",          0.005, 0.001, 1)
gen.add("klt_eigenThresh",   double_t, 0, "Spatial gradient matrix min EV threshold. Default = 0.0001",     0.007, 0.0001, 1)
gen.add("f2f_failRatio",  double_t, 0, "Loosing too many matches in one step might indicate a bad frame. 0=off",     0, 0, 1)


############################################################## Detect
gen.add("detector", int_t, 0, "Detector Enum", 12, -1, 107, edit_method=detector_enum)
gen.add("kp_min",  int_t, 0, "...",          400, 0, 2000)
gen.add("kp_max",  int_t, 0, "...",          0, 0, 2000)
gen.add("kp_thresh",  double_t, 0, "...",          0.5, 0, 2)
gen.add("kp_subpix",  int_t, 0, "0=off, window=X*2+1",          0, 0, 20)
gen.add("kp_border",  int_t, 0, "...",     21, 0, 150)
gen.add("kp_octaves",  int_t, 0, "...",          4, 0, 12)
gen.add("kp_octaveLayers",  int_t, 0, "...",     2, 0, 12)
gen.add("kp_removeDouble",  bool_t,   1, "Remove duplicates",      True)
gen.add("kp_imuRotate",  bool_t,   1, "Experimental - use imu roll data for KP rotation estimation",      True)
gen.add("extractor", int_t, 0, "Extractor Enum", 205, 0, 207, edit_method=extractor_enum)


############################################################## Match
gen.add("matcher", int_t, 0, "Matcher Enum", 0, 0, 1, edit_method=matcher_enum)
gen.add("match_norm",    int_t, 0, "Norm Enum", 4, 2, 5, edit_method=norm_enum)
gen.add("match_symmetric",  int_t, 0, "Symmetric matches only. 0=Off, X=neighbours", 1, 0, 10)
gen.add("match_unique",  double_t, 0.7, "Unique matches only. 0=different=off 1=identical=best only,X=similarity ratio",     0, 0, 1)
gen.add("match_thresh",  double_t, 0, "Threshold on distance. 0=off",     0, 0, 10)
gen.add("match_ratio",   double_t, 0, "Ratio test. 1=off",     1, 1, 3)
gen.add("match_max",   double_t, 0, "Max nr. 0=unlimited",     0, 0, 2000)
gen.add("match_px",   double_t, 0, "X<1=off, X = max px dist between matches",     300, 0, 1000)
gen.add("match_stepPx",   double_t, 0, "X<1=off, X = max px dist between matches",     30, 0, 1000)

############################################################## VO
#gen.add("vo_doPoseEstimation",  bool_t,   1, "do pose estimation between current frame and latest KF (cam-points) ",      False)
#gen.add("vo_addKF",  bool_t,   1, "Insert latest frame and pose as latest KF",      False)

#gen.add("vo_maxDisparity",   double_t, 0, "",     100, 20, 200)
gen.add("vo_initDisparity",   double_t, 0, "Disparity threshold for triggering initialisation",     100, 20, 200)
gen.add("vo_kfDisparity",   double_t, 0, "Disparity threshold for triggering new KF",     100, 20, 200)

gen.add("vo_relPoseMethod", int_t, 0, "Enum", 0, 0, 5, edit_method=relPose_enum)
gen.add("vo_relRansacIter",   int_t, 0, "",     1100, 50, 5000)
gen.add("vo_relRansacThresh",   double_t, 0, "",     4, 0, 20)
gen.add("vo_relNLO",  bool_t,   1, "Use NLO during initialisation",      True)
gen.add("vo_relBaselineMethod", int_t, 0, "Enum", 2, -1, 3, edit_method=intiBaseline_enum)
gen.add("vo_relBaseline",   double_t, 0, "",     2.2, 0, 10)
gen.add("vo_triMethod", int_t, 0, "Enum", 2, 1, 2, edit_method=triangulation_enum)

gen.add("vo_absPoseMethod", int_t, 0, "Enum", 1, 0, 3, edit_method=absPose_enum)
gen.add("vo_absRansacIter",   int_t, 0, "",     1100, 50, 5000)
gen.add("vo_absRansacThresh",   double_t, 0, "",     4, 0, 20)
gen.add("vo_absNLO",  bool_t,   1, "Use NLO during initialisation",      True)

gen.add("map_maxKF",   int_t, 0, "",     10, 1, 100)


exit(gen.generate(PACKAGE, "VoNode", "VoNode_params"))
